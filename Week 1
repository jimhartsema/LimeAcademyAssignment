// SPDX-License-Identifier: MIT
pragma solidity ^0.8.06;

// Delegatecall executes code in another contract in the context of the contract that called it
// all state variables must be the same (if you want to add a new one, do so below all state variables)

contract TestDelegateCall {
   uint public num;
   address public sender;
   uint public value;

   function foo(uint _num) external payable {
      num = 2 * _num;
      sender = msg.sender;
      value = msg.value;
   }
}

contract DelegateCall {
   uint public num;
   address public sender;
   uint public value;

   function foo(address _test, uint _num) external payable {
      (bool success, bytes memory data) = test.delegatecall(
         abi.encodeWithSelector(TestDelegateCall.foo.selector, _num)
         );
         require(success, "delegatecall failed");
   }
}

----------------------------------------------------------------------------------------------------------------------------------------------
// Multicall: to aggregate two functions in one function

contract TestMulitCall {
    function func1() external view returns (uint, uint) {
        return(1, block.timestamp);
    }

    function func2() external view returns (uint, uint) {
        return(2, block.timestamp);
    }
}

contract MultiCall {
    function multiCall(address[] calldata targets, bytes [] calldata data)
    external
    view
    returns (bytes[] memory)
    {
        require(targerts.length == data.length, "target length != data length");
        bytes[] memory results = new bytes[](data.length);

        for (uint i; i < targets.length; i++) {
            (bool success, bytes memory result) = targets[i].staticcall(data[i]);
            require(success, "call failed");
            results[i] = result;
        }

        return results;
    }
}

----------------------------------------------------------------------------------------------------------------------------------------------

// timelock examlpe

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.06;

// timelock example

contract TimeLock {
    error notOwnerError();
    error AlreadyQueuedError(bytes32 txId);
    error TimestampNotInRangeError(uint blockTimestamp, uint timestamp);
    error notQueuedError(bytes32 txId);
    error TimestampNotPassedError(uint blockTimestamp, uint timestamp);
    error TimestampExpiredError(uint blockTimestamp, uint experiresAt);
    error TxFailderError();

    event Queue(
        bytes32 indexed txId,
        address indexed target, 
        uint value, 
        string func, 
        bytes data,
        uint timestamp
    );

    event Execute(
        bytes32 indexed txId,
        address indexed target, 
        uint value, 
        string func, 
        bytes data,
        uint timestamp
    );

    event Cancel(bytes32 indexed txId);

    uint public constant MIN_DELAY = 10;
    uint public constant MAX_DELAY = 1000;
    uint public constant GRACE_PERIOD = 1000;

    address public owner;
    mapping(bytes32 => bool) public queued;

    constructor() {
        owner == msg.sender;
    }

    receive() external payable {};

    modifier onlyOwner() {
        if (msg.sender != owner) {
            revert notOwnerError();
        }
        _;
    }
    
    // create tx id in hash
    function getTxId(
        address _target, 
        uint _value, 
        string calldata _func, 
        bytes calldata _data,
        uint _timestamp
    ) public pure returns (bytes32 txId) {
        return keccak256(
            abi.encode(
                _target, _value, _func, _data, _timestamp
            )
        )
    }

    function queue(
        address _target, 
        uint _value, 
        string calldata _func, 
        bytes calldata _data,
        uint _timestamp
        ) external onlyOwner {
            bytes32 txId = getTxId(_target, _value, _func, _data, _timestamp);
            // check tx id unique
            if (queued[txId]) {
                revert AlreadyQueuedError(txId)
            }
            // check timestamp
            if (
                _timestamp < block.timestamp + MIN_DELAY ||
                _timestamp > block.timestamp + MAX_DELAY
                ) {
                    revert TimestampNotInRangeError(block.timestamp, _timestamp);
                }
            // queue tx
            queued[txId] = true;

            emit Queue(
                txId, _target, _value, _func, _data, _timestamp
            );
        }

    function execute(
        address _target, 
        uint _value, 
        string calldata _func, 
        bytes calldata _data,
        uint _timestamp
    ) external payable onlyOwner returns (bytes memory) {
        bytes32 txId = getTxId(_target, _value, _func, _data, _timestamp);
        // check tx is queued
        if (!queued[txId]) {
            revert notQueuedError(txId);
        }
        // check block.timestamp > _timestamp
        if (block.timestamp < _timestamp) {
            revert TimestampNotPassedError(block.timestamp, _timestamp);
        }
        // timestamp expired
        if (block.timestamp > _timestamp + GRACE_PERIOD) {
            revert TimestampExpiredError(block.timestamp, _timestamp + GRACE_PERIOD);
        }
        // delete tx from queue
        queued[txId] = false;

        // execute the tx
        bytes memory data;
        if (bytes(_func).length > 0) {
            data = abi.encodePacked(
                bytes4 (keccak256(bytes(_func))), _data
            );
        } else {
            data = _data;
        }
        (bool ok, bytes memory res) = _target.call{value: _value}(data);
        if (!ok) {
            revert TxFailderError();
        }

        emit Execute(txId, target, _value, _func, _data, _timestamp);

        return res;
    }
        // cancel tx
        function cancel(bytes32 _txId) external onlyOwner {
            if(!queued[_txId]) {
                revert notQueuedError(_txId);
            }
            queued[_txId] = false;
            emit Cancel(_txId);

        }
}

contract TestTimeLock {
    address public timeLock;

    constructor(address _timeLock) {
        timelock = _timeLock;
    }

    function test() external {
        require(msg.sender == timeLock);
    }
}

----------------------------------------------------------------------------------------------------------------------------------------------
USElection contract

// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;
pragma abicoder v2;

contract USElection is Ownable {
    uint8 public constant BIDEN = 1;
    uint8 public constant TRUMP = 2;
    
    bool public electionEnded;

    mapping(uint8 => uint8) public seats;
    mapping(string => bool) public resultsSubmitted;
    
    struct StateResult {
        string name;
        uint votesBiden;
        uint votesTrump;
        uint8 stateSeats;
    }

    event LogStateResult(uint8 winner, uint8 stateSeats, string state);
    event LogElectionEnded(uint winner);

		modifier onlyActiveElection() {
        require(!electionEnded, "The election has ended already");
        _;
    }
		    
	function submitStateResult(StateResult calldata result) public onlyOwner onlyActiveElection {
		require(result.stateSeats > 0, "States must have at least 1 seat");
		require(result.votesBiden != result.votesTrump, "There cannot be a tie");
        require(!resultsSubmitted[result.name], "This state result was already submitted");
		
        uint8 winner;
		    if(result.votesBiden > result.votesTrump) {
		        winner = BIDEN;
		    } else {
		        winner = TRUMP;
		    }
		    
		seats[winner] += result.stateSeats;
        resultsSubmitted[result.name] = true;
		    
		emit LogStateResult(winner, result.stateSeats, result.name);
        }
    }
    
    function currentLeader() public view returns(uint8) {
		if(seats[BIDEN] > seats[TRUMP]) {
		    return BIDEN;
		}
		if(seats[TRUMP] > seats[BIDEN]) {
		    return TRUMP;
		}
		return 0;
    }

    function endElection() public onlyOwner onlyActiveElection {
        electionEnded = true;
        emit LogElectionEnded(currentLeader());
    } 
}


